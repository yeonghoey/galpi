service: galpi

provider:
  name: aws
  runtime: python3.6
  stage: ${opt:stage}
  region: ap-northeast-1
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource:
        - { "Fn::GetAtt": [Items, Arn] }

plugins:
  - serverless-domain-manager
  - serverless-python-requirements
  - serverless-wsgi
  - serverless-dynamodb-local

custom:
  customDomain:
    domainName: ${self:custom.domain.${opt:stage}}
    stage: ${opt:stage}
    createRoute53Record: true
  domain:
    dev: ''
    staging: staging.api.galpi.io
    prod: api.galpi.io
  corsOrigin:
    dev: 'http://localhost:8080'
  dynamodb:
    start:
      migrate: true
    seed:
      dev:
        sources:
          - table: ${self:service}-${opt:stage}-items
            sources: [./dev/items.json]

  pythonRequirements:
    dockerizePip: non-linux
  wsgi:
    app: app.app
    packRequirements: false

functions:
  app:
    handler: wsgi.handler
    environment:
      SECRET_KEY: ${ssm:/galpi/${opt:stage}/secret_key}
      CLIENT_ID: ${ssm:/galpi/${opt:stage}/client_id}
      CLIENT_SECRET: ${ssm:/galpi/${opt:stage}/client_secret}
      CORS_ORIGIN: ${self:custom.corsOrigin.${opt:stage}}
      TABLE_PREFIX: ${self:service}-${opt:stage}
    events:
      - http: 'ANY /'
      - http: 'ANY {proxy+}'

resources:
  Resources:
    Items:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:service}-${opt:stage}-items
        AttributeDefinitions:
          - AttributeName: owner
            AttributeType: S
          - AttributeName: name
            AttributeType: S
        KeySchema:
          - AttributeName: owner
            KeyType: HASH
          - AttributeName: name
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
